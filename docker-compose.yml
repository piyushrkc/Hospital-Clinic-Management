version: '3.8'

services:
  # MongoDB database service
  mongodb:
    image: mongo:6
    container_name: hms-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USERNAME:-root}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-example}
      MONGO_INITDB_DATABASE: hospital-management
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis cache service
  redis:
    image: redis:7-alpine
    container_name: hms-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    command: redis-server --save 60 1 --loglevel warning

  # Backend API service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: hms-backend:latest
    container_name: hms-backend
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=5000
      - MONGODB_URI=mongodb://${MONGO_USERNAME:-root}:${MONGO_PASSWORD:-example}@mongodb:27017/hospital-management?authSource=admin
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-1h}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-7d}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost:3000}
      - CACHE_ENABLED=true
      - REDIS_URL=redis://redis:6379
      # Email configuration
      - EMAIL_PROVIDER=${EMAIL_PROVIDER:-resend}
      - RESEND_API_KEY=${RESEND_API_KEY}
      # Twilio configuration
      - TWILIO_ACCOUNT_SID=${TWILIO_ACCOUNT_SID}
      - TWILIO_AUTH_TOKEN=${TWILIO_AUTH_TOKEN}
      - TWILIO_MESSAGING_SERVICE_SID=${TWILIO_MESSAGING_SERVICE_SID}
    ports:
      - "5000:5000"
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: hms-frontend:latest
    container_name: hms-frontend
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_API_URL=http://backend:5000/api
      - NEXT_PUBLIC_APP_ENV=${NODE_ENV:-production}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
    ports:
      - "3000:3000"
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

networks:
  hms-network:
    driver: bridge

volumes:
  mongodb-data:
    driver: local
  redis-data:
    driver: local